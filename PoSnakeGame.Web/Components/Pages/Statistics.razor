@page "/statistics"
@using PoSnakeGame.Core.Models
@using PoSnakeGame.Infrastructure.Services
@inject TableStorageService TableStorageService
@rendermode InteractiveServer

<PageTitle>Snake Battle Royale - Statistics</PageTitle>

<link href="css/statistics.css" rel="stylesheet" />

<div class="statistics-container">
    <h1 class="retro-title">GAME STATISTICS</h1>
    
    @if (_loading)
    {
        <div class="loading-container">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">Loading statistics...</div>
            </div>
        </div>
    }
    else if (_error)
    {
        <div class="error">
            <p>Error loading statistics. Please try again later.</p>
            <button class="retro-button" @onclick="LoadStatistics">RETRY</button>
        </div>
    }
    else
    {
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">Total Games</div>
                <div class="stat-value">@_totalGames</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Average Score</div>
                <div class="stat-value">@_averageScore</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Highest Score</div>
                <div class="stat-value">@_highestScore</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Food Eaten</div>
                <div class="stat-value">@_totalFoodEaten</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Longest Snake</div>
                <div class="stat-value">@_longestSnake segments</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Total Play Time</div>
                <div class="stat-value">@_totalPlaytime min</div>
            </div>
        </div>
    }
    
    <div class="buttons">
        <button class="retro-button" @onclick="NavigateToMainMenu">MAIN MENU</button>
        <button class="retro-button" @onclick="NavigateToGame">PLAY GAME</button>
    </div>
</div>

@code {
    private bool _loading = true;
    private bool _error = false;
    
    // Sample statistics (in a real app, these would come from Azure Table Storage)
    private int _totalGames = 0;
    private int _averageScore = 0;
    private int _highestScore = 0;
    private int _totalFoodEaten = 0;
    private int _longestSnake = 0;
    private int _totalPlaytime = 0;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    
    // Load statistics on component initialization
    protected override async Task OnInitializedAsync()
    {
        // Pre-populate with data to avoid flashing
        _totalGames = 42;
        _averageScore = 78;
        _highestScore = 217;
        _totalFoodEaten = 326;
        _longestSnake = 18;
        _totalPlaytime = 104;
        
        // Still load data but don't show loading indicator
        await LoadStatisticsQuietly();
    }
    
    private async Task LoadStatisticsQuietly()
    {
        try
        {
            // Don't set _loading to true here to avoid UI flash
            Console.WriteLine("Loading game statistics");
            
            // In a real app, we would load stats from Azure Table Storage
            await Task.Delay(500);
            
            // Sample data updates would happen here
            // In this demo, we're keeping the pre-populated values
            
            Console.WriteLine("Statistics loaded successfully");
        }
        catch (Exception ex)
        {
            _error = true;
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadStatistics()
    {
        try
        {
            _loading = true;
            _error = false;
            StateHasChanged();
            
            Console.WriteLine("Reloading game statistics");
            
            // In a real app, we would load stats from Azure Table Storage
            await Task.Delay(500);
            
            // Sample data for demonstration
            _totalGames = 42;
            _averageScore = 78;
            _highestScore = 217;
            _totalFoodEaten = 326;
            _longestSnake = 18;
            _totalPlaytime = 104;
            
            Console.WriteLine("Statistics reloaded successfully");
        }
        catch (Exception ex)
        {
            _error = true;
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private void NavigateToMainMenu()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private void NavigateToGame()
    {
        NavigationManager.NavigateTo("/game");
    }
}