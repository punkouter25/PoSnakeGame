@page "/statistics"
@using PoSnakeGame.Core.Models
@using PoSnakeGame.Infrastructure.Services
@inject TableStorageService TableStorageService
@rendermode InteractiveServer

<PageTitle>Snake Battle Royale - Statistics</PageTitle>

<div class="statistics-container">
    <h1 class="retro-title">GAME STATISTICS</h1>
    
    @if (_loading)
    {
        <div class="loading">Loading statistics...</div>
    }
    else if (_error)
    {
        <div class="error">
            <p>Error loading statistics. Please try again later.</p>
            <button class="retro-button" @onclick="LoadStatistics">RETRY</button>
        </div>
    }
    else
    {
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">Total Games</div>
                <div class="stat-value">@_totalGames</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Average Score</div>
                <div class="stat-value">@_averageScore</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Highest Score</div>
                <div class="stat-value">@_highestScore</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Food Eaten</div>
                <div class="stat-value">@_totalFoodEaten</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Longest Snake</div>
                <div class="stat-value">@_longestSnake segments</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Total Play Time</div>
                <div class="stat-value">@_totalPlaytime min</div>
            </div>
        </div>
    }
    
    <div class="buttons">
        <button class="retro-button" @onclick="NavigateToMainMenu">MAIN MENU</button>
        <button class="retro-button" @onclick="NavigateToGame">PLAY GAME</button>
    </div>
</div>

<style>
    .statistics-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        width: 100%;
        margin: 30px 0;
    }
    
    .stat-card {
        background-color: #000;
        border: 2px solid #39ff14;
        box-shadow: 0 0 10px #39ff14;
        padding: 20px;
        text-align: center;
        transition: transform 0.3s;
    }
    
    .stat-card:hover {
        transform: scale(1.05);
    }
    
    .stat-title {
        font-family: 'Press Start 2P', monospace;
        color: #39ff14;
        font-size: 14px;
        margin-bottom: 10px;
    }
    
    .stat-value {
        font-size: 24px;
        color: #fff;
        font-weight: bold;
    }
    
    .loading, .error {
        padding: 20px;
        text-align: center;
        margin: 20px 0;
        font-family: 'Press Start 2P', monospace;
    }
    
    .loading {
        color: #39ff14;
    }
    
    .error {
        color: #ff0000;
    }
    
    .buttons {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }
    
    @@media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @@media (max-width: 500px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }
        
        .buttons {
            flex-direction: column;
        }
    }
</style>

@code {
    private bool _loading = true;
    private bool _error = false;
    
    // Sample statistics (in a real app, these would come from Azure Table Storage)
    private int _totalGames = 0;
    private int _averageScore = 0;
    private int _highestScore = 0;
    private int _totalFoodEaten = 0;
    private int _longestSnake = 0;
    private int _totalPlaytime = 0;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadStatistics();
    }
    
    private async Task LoadStatistics()
    {
        try
        {
            _loading = true;
            _error = false;
            StateHasChanged();
            
            Console.WriteLine("Loading game statistics");
            
            // In a real app, we would load stats from Azure Table Storage
            // For now, we'll simulate a delay and generate sample data
            await Task.Delay(500);
            
            // Sample data for demonstration
            _totalGames = 42;
            _averageScore = 78;
            _highestScore = 217;
            _totalFoodEaten = 326;
            _longestSnake = 18;
            _totalPlaytime = 104;
            
            Console.WriteLine("Statistics loaded successfully");
        }
        catch (Exception ex)
        {
            _error = true;
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private void NavigateToMainMenu()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private void NavigateToGame()
    {
        NavigationManager.NavigateTo("/game");
    }
}