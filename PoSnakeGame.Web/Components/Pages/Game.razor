@page "/game"
@using PoSnakeGame.Core.Models
@using PoSnakeGame.Core.Services
@using PoSnakeGame.Infrastructure.Services
@using Microsoft.AspNetCore.Components.Web
@inject GameService GameService
@inject GameEngine GameEngine
@inject TableStorageService TableStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Snake Battle Royale - Game</PageTitle>

<div class="game-container" @ref="gameContainerRef" tabindex="0" @onkeydown="HandleKeyDown" @onfocusin="FocusIn" @onfocusout="FocusOut">
    <div class="game-header">
        <div class="game-timer">Time Left: @TimeRemaining.ToString("0.0")s</div>
        <div class="game-score">Score: @PlayerScore</div>
    </div>
    
    @if (GameService.IsGameOver)
    {
        <div class="game-over-overlay">
            <div class="game-over-content">
                @if (_showingHighScoreSubmission)
                {
                    <HighScoreSubmission Score="@PlayerScore" OnSubmitted="OnHighScoreSubmitted" />
                }
                else
                {
                    <h2>GAME OVER</h2>
                    <p>Your Score: @PlayerScore</p>
                    <button class="retro-button" @onclick="RestartGame">PLAY AGAIN</button>
                    <button class="retro-button" @onclick="NavigateToMainMenu">MAIN MENU</button>
                }
            </div>
        </div>
    }
    else if (GameService.IsCountdownActive)
    {
        <div class="countdown-overlay">
            <div class="countdown-value">@GameService.CountdownValue</div>
            <div class="countdown-text">GET READY!</div>
        </div>
    }
    
    <div class="game-arena" style="width: @(ArenaWidth * CellSize)px; height: @(ArenaHeight * CellSize)px">
        @if (GameService.Arena != null)
        {
            @* Render obstacles *@
            @foreach (var obstacle in GameService.Arena.Obstacles)
            {
                <div class="obstacle" style="width: @(CellSize)px; height: @(CellSize)px; 
                                            left: @(obstacle.X * CellSize)px; top: @(obstacle.Y * CellSize)px;"></div>
            }

            @* Render foods *@
            @foreach (var food in GameService.Arena.Foods)
            {
                <div class="food" style="width: @(CellSize)px; height: @(CellSize)px; 
                                        left: @(food.X * CellSize)px; top: @(food.Y * CellSize)px;"></div>
            }

            @* Render power-ups *@
            @foreach (var powerUp in GameService.Arena.PowerUps)
            {
                <div class="power-up @powerUp.Type.ToString().ToLowerInvariant()" 
                     style="width: @(CellSize)px; height: @(CellSize)px; 
                            left: @(powerUp.Position.X * CellSize)px; top: @(powerUp.Position.Y * CellSize)px;"></div>
            }

            @* Render snakes *@
            @foreach (var snake in GameService.Snakes)
            {
                @foreach (var segment in snake.Segments)
                {
                    <div class="snake-segment @(segment == snake.Segments[0] ? "head" : "")" 
                         style="width: @(CellSize)px; height: @(CellSize)px; 
                                left: @(segment.X * CellSize)px; top: @(segment.Y * CellSize)px; 
                                background-color: rgb(@snake.Color.R, @snake.Color.G, @snake.Color.B); 
                                opacity: @(snake.IsAlive ? "1" : "0.5");">
                    </div>
                }
            }
        }
    </div>
    
    @if (IsMobileDevice)
    {
        <div class="virtual-joystick" @ref="joystickRef">
            <div class="joystick-base">
                <div class="joystick-thumb" @ref="joystickThumbRef"></div>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference gameContainerRef;
    private ElementReference joystickRef;
    private ElementReference joystickThumbRef;
    private DotNetObjectReference<Game>? objRef;
    private bool _showingHighScoreSubmission;
    
    private int ArenaWidth => GameService.Arena?.Width ?? 20;
    private int ArenaHeight => GameService.Arena?.Height ?? 20;
    private int CellSize => 20;
    private float TimeRemaining => GameService.TimeRemaining;
    private int PlayerScore => GameService.Snakes.FirstOrDefault(s => s.Type == SnakeType.Human)?.Score ?? 0;
    private bool IsMobileDevice = false;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Set up the UI thread invoker for the GameService
        GameService.SetUiThreadInvoker(action => InvokeAsync(action));
        
        // Initialize the game
        GameService.InitializeGame();
        
        // Subscribe to game state changes
        GameService.OnGameStateChanged += StateHasChanged;
        GameService.OnGameOver += HandleGameOver;
        GameService.OnCountdownChanged += StateHasChanged;
        
        await base.OnInitializedAsync();
    }

    private async void HandleGameOver()
    {
        // Check if the score qualifies for the high score board
        if (await TableStorageService.IsHighScore(PlayerScore))
        {
            _showingHighScoreSubmission = true;
        }
        StateHasChanged();
    }

    private void OnHighScoreSubmitted(bool success)
    {
        _showingHighScoreSubmission = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Detect if we're on a mobile device
            IsMobileDevice = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            
            // Set focus to the game container for keyboard input
            await JSRuntime.InvokeVoidAsync("focusElement", gameContainerRef);
            
            // Initialize virtual joystick if on mobile
            if (IsMobileDevice)
            {
                objRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initVirtualJoystick", joystickRef, joystickThumbRef, objRef);
            }
            
            // Start the game
            GameEngine.Start();
            
            // Ensure the game is running
            GameService.StartGame();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        // Handle keyboard input for snake direction
        switch (e.Key)
        {
            case "ArrowUp":
            case "w":
            case "W":
                GameService.ChangeHumanSnakeDirection(Direction.Up);
                break;
            case "ArrowDown":
            case "s":
            case "S":
                GameService.ChangeHumanSnakeDirection(Direction.Down);
                break;
            case "ArrowLeft":
            case "a":
            case "A":
                GameService.ChangeHumanSnakeDirection(Direction.Left);
                break;
            case "ArrowRight":
            case "d":
            case "D":
                GameService.ChangeHumanSnakeDirection(Direction.Right);
                break;
        }
    }

    [JSInvokable]
    public void OnJoystickMove(string direction)
    {
        // Handle virtual joystick input
        Direction snakeDirection = direction switch
        {
            "up" => Direction.Up,
            "down" => Direction.Down,
            "left" => Direction.Left,
            "right" => Direction.Right,
            _ => GameService.Snakes.FirstOrDefault(s => s.Type == SnakeType.Human)?.CurrentDirection ?? Direction.Right
        };
        
        GameService.ChangeHumanSnakeDirection(snakeDirection);
    }

    private async Task RestartGame()
    {
        // Stop the engine and wait for it to complete
        await GameEngine.StopAsync();
        
        // Reset the game
        GameService.InitializeGame();
        
        // Ensure game is in the correct state
        _showingHighScoreSubmission = false;
        
        // Start the engine again
        GameEngine.Start();
        
        // Ensure the game starts running after initialization
        // This is needed to make the countdown work
        GameService.StartGame();
    }

    private void NavigateToMainMenu()
    {
        GameEngine.Stop();
        NavigationManager.NavigateTo("/");
    }

    private void FocusIn()
    {
        // No need to handle focus events since we removed pause/resume functionality
    }

    private void FocusOut()
    {
        // No need to handle focus events since we removed pause/resume functionality
    }

    public void Dispose()
    {
        // Unsubscribe from events and stop the game
        GameService.OnGameStateChanged -= StateHasChanged;
        GameService.OnGameOver -= HandleGameOver;
        GameService.OnCountdownChanged -= StateHasChanged;
        GameEngine.Stop();
        
        // Dispose the JS interop object
        objRef?.Dispose();
    }
}
