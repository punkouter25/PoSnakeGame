@using PoSnakeGame.Core.Models
@using PoSnakeGame.Infrastructure.Services
@inject TableStorageService TableStorageService
@inject NavigationManager NavigationManager

<div class="high-score-submission">
    <h2>NEW HIGH SCORE!</h2>
    <p>Score: @Score</p>
    
    <div class="initials-input">
        <div class="input-container">
            @for (int i = 0; i < 3; i++)
            {
                var index = i;
                <input type="text" 
                       maxlength="1" 
                       @bind="_initials[index]"
                       @onkeydown="(e) => HandleKeyDown(e, index)"
                       @ref="_inputRefs[index]"
                       class="initial-input" />
            }
        </div>
        <button class="retro-button" @onclick="Submit" disabled="@(!IsValid)">SUBMIT</button>
    </div>
    
    @if (_error)
    {
        <div class="error-message">Error saving score. Please try again.</div>
    }
</div>

<style>
    .high-score-submission {
        text-align: center;
        padding: 20px;
        font-family: 'Press Start 2P', monospace;
    }
    
    .initials-input {
        margin: 20px 0;
    }
    
    .input-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .initial-input {
        width: 40px;
        height: 40px;
        text-align: center;
        font-size: 24px;
        background-color: #000;
        border: 2px solid #39ff14;
        color: #39ff14;
        font-family: 'Press Start 2P', monospace;
        text-transform: uppercase;
    }
    
    .initial-input:focus {
        outline: none;
        box-shadow: 0 0 10px #39ff14;
    }
    
    .error-message {
        color: #ff0000;
        margin-top: 10px;
    }
</style>

@code {
    [Parameter] public int Score { get; set; }
    [Parameter] public EventCallback<bool> OnSubmitted { get; set; }

    private string[] _initials = new string[3] { "", "", "" };
    private bool _error;
    private ElementReference[] _inputRefs = new ElementReference[3];

    private bool IsValid => _initials.All(i => !string.IsNullOrWhiteSpace(i));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus first input on load
            await _inputRefs[0].FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace" && string.IsNullOrEmpty(_initials[index]) && index > 0)
        {
            // Move to previous input on backspace if current is empty
            await _inputRefs[index - 1].FocusAsync();
        }
        else if (e.Key.Length == 1 && char.IsLetter(e.Key[0]) && index < 2)
        {
            // Move to next input after entering a letter
            await _inputRefs[index + 1].FocusAsync();
        }
    }

    private async Task Submit()
    {
        if (!IsValid) return;

        try
        {
            var highScore = new HighScore
            {
                Initials = string.Join("", _initials).ToUpper(),
                Score = Score,
                Date = DateTime.UtcNow,
                GameDuration = 30.0f, // TODO: Get actual duration
                SnakeLength = 1, // TODO: Get actual length
                FoodEaten = 0 // TODO: Get actual food eaten
            };

            await TableStorageService.SaveHighScoreAsync(highScore);
            await OnSubmitted.InvokeAsync(true);
            NavigationManager.NavigateTo("/highscores");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving high score: {ex.Message}");
            _error = true;
            StateHasChanged();
        }
    }
}