name: Build, Test, and Deploy

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Shared Variables
  DOTNET_VERSION: '9.0.x'
  # API Variables (now includes embedded Blazor WASM)
  API_PROJECT_PATH: 'PoSnakeGame.Api/PoSnakeGame.Api.csproj'
  AZURE_API_WEBAPP_NAME: posnakegame-api   # Name of the Azure App Service for API

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      api_publish_path: ${{ steps.publish_api.outputs.publish_path }} # Output path for API artifact

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true # Checkout submodules if any

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --no-restore --configuration Release

    # - name: Run Tests
    #   run: dotnet test --no-build --verbosity detailed --configuration Release --collect:"XPlat Code Coverage" --logger "console;verbosity=detailed"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      # Add with: token: ${{ secrets.CODECOV_TOKEN }} if needed

    - name: Publish API Project (with embedded Blazor WASM)
      id: publish_api # Give the step an ID
      run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-build --output ./api-publish
      # outputs:
      #   publish_path: ./api-publish # Define output path

    - name: Upload API Artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-publish-artifact # Artifact name for API
        path: ./api-publish # Path to API publish output

    # - name: Run code analysis (Format Check)
    #   run: |
    #     dotnet tool install --global dotnet-format --version 8.0.4 
    #     dotnet format --verify-no-changes --verbosity diagnostic

  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: csharp

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Autobuild
      # This step automatically attempts to build the code
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  deploy_api:
    name: Deploy API with embedded Blazor WebAssembly
    needs: build # Depends on the build job succeeding
    runs-on: ubuntu-latest
    # Only run on push to master branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    # Removed environment block as 'production' environment is not configured in repo settings
    # environment:
    #   name: production 
    #   url: ${{ steps.deploy_to_webapp.outputs.webapp-url }}

    steps:
    - name: Download API Artifact
      uses: actions/download-artifact@v4
      with:
        name: api-publish-artifact # Match artifact name from build job
        path: ./api-publish # Download to this path

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Requires AZURE_CREDENTIALS secret

    - name: Deploy to Azure App Service
      id: deploy_to_webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_API_WEBAPP_NAME }}
        package: './api-publish' # Deploy the downloaded artifact

    - name: Logout from Azure
      run: |
        az logout
        az cache purge
        az account clear
      if: always() # Ensure logout runs even if deployment fails
