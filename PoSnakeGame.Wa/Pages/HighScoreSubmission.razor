@using PoSnakeGame.Core.Models
@using PoSnakeGame.Infrastructure.Services
@inject NavigationManager NavigationManager

<div class="high-score-submission">
    <h2>NEW HIGH SCORE!</h2>
    <p>Score: @Score</p>
    
    <div class="initials-input">
        <div class="input-container">
            @for (int i = 0; i < 3; i++)
            {
                var index = i;
                <input type="text" 
                       maxlength="1" 
                       value="@_initials[index]"
                       @oninput="(e) => HandleInput(e, index)"
                       @onkeydown="(e) => HandleKeyDown(e, index)"
                       @ref="_inputRefs[index]"
                       class="initial-input" />
            }
        </div>
    </div>
    
    @if (_error)
    {
        <div class="error-message">Error saving score. Please try again.</div>
    }
    
    <button class="retro-button" @onclick="Submit" disabled="@(!IsValid)">SUBMIT</button>
</div>

@code {
    [Parameter] public int Score { get; set; }
    [Parameter] public EventCallback<string> OnSubmitted { get; set; }

    private string[] _initials = new string[3] { "", "", "" };
    private bool _error;
    private ElementReference[] _inputRefs = new ElementReference[3];

    private bool IsValid => _initials.All(i => !string.IsNullOrWhiteSpace(i));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _inputRefs[0].FocusAsync();
        }
    }

    private async Task HandleInput(ChangeEventArgs e, int index)
    {
        var value = e.Value?.ToString() ?? "";
        if (value.Length > 0 && char.IsLetter(value[0]))
        {
            _initials[index] = value[0].ToString().ToUpper();
            StateHasChanged();

            if (index < 2)
            {
                await _inputRefs[index + 1].FocusAsync();
            }
            else if (index == 2 && IsValid)
            {
                await Submit();
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace" && string.IsNullOrEmpty(_initials[index]) && index > 0)
        {
            await _inputRefs[index - 1].FocusAsync();
        }
        else if (e.Key == "Enter" && IsValid)
        {
            await Submit();
        }
        // We'll handle letter entry via the HandleInput method instead of duplicating logic here
    }

    private async Task Submit()
    {
        if (!IsValid) return;

        try
        {
            string initials = string.Join("", _initials).ToUpper();
            await OnSubmitted.InvokeAsync(initials);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error processing high score submission: {ex.Message}");
            _error = true;
            StateHasChanged();
        }
    }
}