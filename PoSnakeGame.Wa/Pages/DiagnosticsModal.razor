@using PoSnakeGame.Wa.Services
@inject DiagnosticsService DiagnosticsService

@if (IsVisible)
{
    <div class="diagnostics-modal-overlay">
        <div class="diagnostics-modal-content">
            <h4>System Diagnostics</h4>
            @if (_isLoading)
            {
                <div class="loading-spinner">Running checks...</div>
            }
            else if (_checks != null)
            {
                <ul>
                    @foreach (var check in _checks)
                    {
                        <li class="check-item @GetStatusClass(check.Status)">
                            <span class="status-icon">@GetStatusIcon(check.Status)</span>
                            <span class="check-name">@check.Name:</span>
                            <span class="check-status">@check.Status</span>
                            @if (!string.IsNullOrEmpty(check.Message))
                            {
                                <span class="check-message"> - @check.Message</span>
                            }
                        </li>
                    }
                </ul>
                @* Close button removed *@
            }
            else
            {
                 <p>Failed to load diagnostic checks.</p>
                 @* Close button removed *@
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<DiagnosticCheck>? _checks;
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && _checks == null) 
        {
            await RunDiagnostics();
        }
    }

    private async Task RunDiagnostics()
    {
        _isLoading = true;
        _checks = null; 
        StateHasChanged(); 

        _checks = await DiagnosticsService.RunChecksAsync();

        _isLoading = false;
        StateHasChanged(); 

        _ = AutoCloseModalAfterDelay(2000); 
    }

    private async Task AutoCloseModalAfterDelay(int delayMilliseconds)
    {
        await Task.Delay(delayMilliseconds);
        if (IsVisible) 
        {
            await CloseModal();
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false; 
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
        
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
        
        _checks = null; 
        _isLoading = true; 
    }

    private string GetStatusClass(string status) => status.ToLowerInvariant();
    private string GetStatusIcon(string status) => status switch
    {
        "Connected" => "✔️",
        "Disconnected" => "❌",
        "Error" => "⚠️",
        "Checking" => "⏳",
        "Pending" => "⚪",
        "Skipped" => "➖",
        _ => "?"
    };
}
