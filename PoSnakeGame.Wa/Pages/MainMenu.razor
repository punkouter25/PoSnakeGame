@page "/"
@using PoSnakeGame.Wa.Services
@using Microsoft.Extensions.Logging
@using System

<PageTitle>Snake Battle Royale</PageTitle>

<div class="main-menu">
    <h1 class="retro-title">SNAKE BATTLE ROYALE</h1>
    
    @if (IsLoading)
    {
        <div class="loading-spinner">
            <p>Checking API connectivity...</p>
        </div>
    }
    else
    {
        <div class="api-status @(IsConnected ? "connected" : "disconnected")">
            <p>
                <span class="status-indicator"></span>
                API Status: @(IsConnected ? "Connected" : "Not Connected")
                @if (IsConnected)
                {
                    <span> - @HelloWorldMessage</span>
                }
            </p>
        </div>
    }
    
    <div class="menu-buttons">
        <button class="retro-button" @onclick="StartGame">START GAME</button>
        <button class="retro-button" @onclick="ViewHighScores">HIGH SCORES</button>
        <button class="retro-button" @onclick="ViewStatistics">STATISTICS</button>
        <button class="retro-button" @onclick="ViewSettings">SETTINGS</button> @* Added Settings button *@
    </div>
</div>

@code {
    private string HelloWorldMessage { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;
    private bool IsConnected { get; set; } = false;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject]
    private HelloWorldService HelloWorldService { get; set; } = default!;
    
    [Inject]
    private ILogger<MainMenu> Logger { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Call the HelloWorld function when the main menu loads to verify connectivity
            Logger.LogInformation("Checking API connectivity on startup");
            
            var response = await HelloWorldService.GetConnectionStatusAsync();
            
            if (response != null)
            {
                // Accept "API Responding" as a connected status
                IsConnected = response.Status == "API Responding" || response.Status == "Connected"; 
                HelloWorldMessage = response.Message;
                Logger.LogInformation("API connectivity check completed. Connected: {IsConnected} (Status: {Status}), Message: {Message}", 
                    IsConnected, response.Status, HelloWorldMessage);
            }
            else
            {
                IsConnected = false;
                HelloWorldMessage = "Could not connect to API";
                Logger.LogWarning("Failed to connect to API on startup");
            }
        }
        catch (Exception ex)
        {
            IsConnected = false;
            HelloWorldMessage = "Error connecting to API";
            Logger.LogError(ex, "Error checking API connectivity on startup: {Error}", ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
        
        await base.OnInitializedAsync();
    }
    
    private void StartGame()
    {
        NavigationManager.NavigateTo("/game");
    }

    private void ViewHighScores()
    {
        NavigationManager.NavigateTo("/highscores");
    }

    private void ViewStatistics()
    {
        NavigationManager.NavigateTo("/statistics");
    }

    private void ViewSettings()
    {
        NavigationManager.NavigateTo("/settings");
    }
}
