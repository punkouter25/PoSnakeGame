@page "/highscores"
@using PoSnakeGame.Core.Models
@using PoSnakeGame.Wa.Services // Add this for HighScoreService
@using PoSnakeGame.Core.Interfaces
@inject HighScoreService HighScoreService // Inject the new service
@inject IUserPreferencesService UserPreferencesService

<PageTitle>Snake Battle Royale - High Scores</PageTitle>

<div class="high-scores-container">
    <h1 class="retro-title">HIGH SCORES</h1>
    
    @if (_loading)
    {
        <div class="loading">Loading high scores...</div>
    }
    else if (_error)
    {
        <div class="error">@_errorMessage</div>
    }
    else if (_highScores == null || !_highScores.Any())
    {
        <div class="no-scores">No high scores recorded yet. Be the first!</div>
    }
    else
    {
        <div class="scores-table">
            <div class="table-header">
                <div class="col-initials">PLAYER</div>
                <div class="col-score">SCORE</div>
                <div class="col-date">DATE</div>
            </div>
            
            @foreach (var (score, index) in _highScores.Select((score, index) => (score, index)))
            {
                string rowClass = score.Initials == _playerInitials ? "table-row personal-best" : "table-row";
                
                <div class="@rowClass">
                    <div class="col-initials">@score.Initials</div>
                    <div class="col-score">@score.Score</div>
                    <div class="col-date">@score.Date.ToString("MM/dd/yy")</div>
                </div>
            }
        </div>
    }
    
    <a href="/" class="retro-button">BACK TO MENU</a>
</div>

@code {
    private List<HighScore> _highScores;
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage;
    private string _playerInitials;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Use the new service to get scores from the API
            _highScores = await HighScoreService.GetHighScoresAsync(); 
            var userPrefs = await UserPreferencesService.GetUserPreferencesAsync();
            _playerInitials = userPrefs.Initials;
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Error loading high scores: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
}
